import socket, json
import numpy as np
import tensorflow as tf
import wandb

class RUN_CFG:
    def __init__(self, file):
        if socket.gethostname() == 'gpu1':
            self.LOG_DATA_DIR = "/data/bartley/gpu_test/"
            self.MY_DATA_DIR = self.LOG_DATA_DIR + "my-gislr-data/"
            self.COMP_DATA_DIR = self.LOG_DATA_DIR + "asl-signs/"
            self.MW_DATA_DIR = self.LOG_DATA_DIR + file + "/"
            self.WEIGHTS_DIR = self.LOG_DATA_DIR + "saved_weights/"
            self.TRIPLET_DATA = self.LOG_DATA_DIR + "gislr-triplet-data/"

            with open("config.json", "r+") as f:
                wandb_key = json.load(f)['wandb_key']
            wandb.login(key=wandb_key)
        
        self.MODEL_PATH = self.LOG_DATA_DIR + "mymodel.h5"
        self.INFER_PATH = self.LOG_DATA_DIR + "tf_model_infer"
        self.TFLITE_PATH = self.LOG_DATA_DIR + "model.tflite"
        
        # Used in Kaggle env
        self.SUBMIT = True

        # # ---------- Model Config ----------
        self.N_ROWS = 543
        self.N_DIMS = 2
        self.INPUT_SIZE = 64

        # OPTIONAL file PATH
        if file == "gislr-mw-16a":
            # Option: V20 (79 landmarks)
            self.LIPS_IDXS0 = np.array([
                61, 185, 40, 39, 37, 0, 267, 269, 270, 409,
                291, 146, 91, 181, 84, 17, 314, 405, 321, 375,
                78, 191, 80, 81, 82, 13, 312, 311, 310, 415,
                95, 88, 178, 87, 14, 317, 402, 318, 324, 308,
                ])

            self.EYES_IDXS0 = np.array([33,159,133,145,362,386,263,374,1,2,98,327])

            # Landmark indices in original data
            self.LEFT_HAND_IDXS0 = np.arange(468,489)
            self.RIGHT_HAND_IDXS0 = np.arange(522,543)
            self.LEFT_POSE_IDXS0 = np.concatenate((np.array([502, 504, 506, 508, 510]), self.EYES_IDXS0))
            self.RIGHT_POSE_IDXS0 = np.concatenate((np.array([503, 505, 507, 509, 511]) , self.EYES_IDXS0))
            self.LANDMARK_IDXS_LEFT_DOMINANT0 = np.concatenate((self.LIPS_IDXS0, self.LEFT_HAND_IDXS0, self.LEFT_POSE_IDXS0))
            self.LANDMARK_IDXS_RIGHT_DOMINANT0 = np.concatenate((self.LIPS_IDXS0, self.RIGHT_HAND_IDXS0, self.RIGHT_POSE_IDXS0))
            self.HAND_IDXS0 = np.concatenate((self.LEFT_HAND_IDXS0, self.RIGHT_HAND_IDXS0), axis=0)
            self.N_COLS = self.LANDMARK_IDXS_LEFT_DOMINANT0.size

            # Landmark indices in processed data
            self.LIPS_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.LIPS_IDXS0)).squeeze()
            self.LEFT_HAND_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.LEFT_HAND_IDXS0)).squeeze()
            self.RIGHT_HAND_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.RIGHT_HAND_IDXS0)).squeeze()
            self.HAND_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.HAND_IDXS0)).squeeze()
            self.POSE_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.LEFT_POSE_IDXS0)).squeeze()

            self.LIPS_START = 0
            self.LEFT_HAND_START = self.LIPS_IDXS.size
            self.RIGHT_HAND_START = self.LEFT_HAND_START + self.LEFT_HAND_IDXS.size
            self.POSE_START = self.RIGHT_HAND_START + self.RIGHT_HAND_IDXS.size

            self.statsdict = {'POSE_MEAN': np.array([[0.48128158, 0.89589083],[0.47540927, 0.68182313],[0.47280234, 0.6161903 ],[0.47247988, 0.5797547 ],[0.47407588, 0.6113952 ],[0.36968395, 0.3722532 ],[0.39401838, 0.3643502 ],[0.42822745, 0.37152776],[0.39657575, 0.37733042],[0.5022916 , 0.37017274],[0.5364219 , 0.3611874 ],[0.5629489 , 0.367665  ],[0.53461444, 0.37427425],[0.46230426, 0.4237136 ],[0.46400854, 0.43631318],[0.42751116, 0.4359091 ],[0.5033123 , 0.4342242 ]], dtype=np.float32), 'POSE_STD': np.array([[0.48750842, 0.0933991 ],[0.2785731 , 0.13016148],[0.23597713, 0.15089056],[0.20231341, 0.1394862 ],[0.19836532, 0.13098423],[0.07362793, 0.07461724],[0.07181355, 0.07450472],[0.06945913, 0.07406247],[0.07160134, 0.07419308],[0.0675202 , 0.07435886],[0.06730472, 0.07509894],[0.06703633, 0.07499121],[0.06676407, 0.07452413],[0.06717017, 0.07596151],[0.0665914 , 0.07586987],[0.06808676, 0.07553091],[0.06549963, 0.07555062]], dtype=np.float32), 'LEFT_HANDS_MEAN': np.array([[0.75869346, 0.66998696],[0.7097719 , 0.63058126],[0.65930927, 0.5900772 ],[0.618904  , 0.56465566],[0.59087056, 0.549599  ],[0.66726446, 0.544086  ],[0.6067027 , 0.51483697],[0.57830566, 0.5121041 ],[0.56221086, 0.51145816],[0.6791375 , 0.5559241 ],[0.6078051 , 0.5352497 ],[0.5863684 , 0.54267365],[0.5791031 , 0.5469511 ],[0.69115645, 0.576975  ],[0.62416214, 0.56305933],[0.60877424, 0.5725781 ],[0.6057572 , 0.577219  ],[0.7028756 , 0.603207  ],[0.65143657, 0.59304   ],[0.63851345, 0.5969334 ],[0.63490546, 0.59807736]], dtype=np.float32), 'LEFT_HANDS_STD': np.array([[0.10106158, 0.12571585],[0.10476863, 0.12234896],[0.1093974 , 0.12539777],[0.11426649, 0.13273634],[0.1234008 , 0.14140362],[0.11315253, 0.13402379],[0.12135054, 0.14970353],[0.12469217, 0.16204847],[0.12982582, 0.17308722],[0.1132836 , 0.14246114],[0.12367266, 0.16114126],[0.12492438, 0.17307244],[0.13037677, 0.18315522],[0.11868669, 0.15085693],[0.13010697, 0.16768062],[0.13008882, 0.17569257],[0.1342971 , 0.18288803],[0.12936541, 0.15792547],[0.14111309, 0.17060271],[0.14181338, 0.17685519],[0.14492628, 0.18267772]], dtype=np.float32), 'LIPS_MEAN': np.array([[0.41525415, 0.47939426],[0.41882986, 0.4750107 ],[0.4253797 , 0.47045675],[0.43502998, 0.4652801 ],[0.45024556, 0.4603687 ],[0.46643794, 0.4619916 ],[0.4826309 , 0.4595575 ],[0.49905086, 0.46370402],[0.50966954, 0.46836886],[0.5172951 , 0.47256923],[0.52186495, 0.47683564],[0.42011452, 0.48348522],[0.42698193, 0.48780724],[0.43791977, 0.49284703],[0.4521003 , 0.49624422],[0.46875396, 0.4970006 ],[0.48545423, 0.49564663],[0.49979982, 0.49166977],[0.5105381 , 0.48608747],[0.51730937, 0.4812727 ],[0.42040178, 0.47893593],[0.4277283 , 0.47716606],[0.43454722, 0.4756335 ],[0.4434654 , 0.47431198],[0.45452997, 0.47371727],[0.46734703, 0.4737115 ],[0.48040727, 0.47312412],[0.491821  , 0.47317424],[0.50132763, 0.47401685],[0.50891286, 0.4752054 ],[0.42795196, 0.47932437],[0.4346833 , 0.47945398],[0.44365668, 0.47955698],[0.4547623 , 0.47988176],[0.46778014, 0.48014253],[0.48093408, 0.47932917],[0.49227762, 0.4784758 ],[0.50165343, 0.47791994],[0.5087401 , 0.47744554],[0.5166792 , 0.47662103]], dtype=np.float32), 'LIPS_STD': np.array([[0.06906798, 0.07659707],[0.06854177, 0.07673516],[0.06809565, 0.07690708],[0.06770112, 0.07709396],[0.06728175, 0.07725324],[0.06666845, 0.07750451],[0.06607704, 0.07712494],[0.06544961, 0.07679018],[0.06496318, 0.07646379],[0.064566  , 0.07615448],[0.06415609, 0.07590489],[0.06858069, 0.07682684],[0.06807555, 0.07725308],[0.06744229, 0.07791283],[0.06674504, 0.07845675],[0.06603798, 0.07858105],[0.06536768, 0.07832868],[0.06486291, 0.07766014],[0.06449548, 0.07683925],[0.06428463, 0.0762542 ],[0.0688288 , 0.07666568],[0.06821401, 0.07687151],[0.06778651, 0.07708108],[0.06731777, 0.07731194],[0.06683893, 0.07751493],[0.06631962, 0.0776047 ],[0.06572415, 0.07737922],[0.065234  , 0.07702701],[0.06481469, 0.07666281],[0.0645657 , 0.07635052],[0.06820136, 0.07669736],[0.06777402, 0.07682188],[0.06728584, 0.07704714],[0.06678381, 0.07727893],[0.06626177, 0.07739697],[0.06568881, 0.0771628 ],[0.06520426, 0.07679975],[0.06479978, 0.07643656],[0.0645258 , 0.07619682],[0.06424969, 0.07603587]], dtype=np.float32)}

        elif file == "gislr-mw-16b":
            # option: V26 (85 landmarks)
            self.LIPS_IDXS0 = np.array([
                    61, 185, 40, 39, 37, 0, 267, 269, 270, 409,
                    291, 146, 91, 181, 84, 17, 314, 405, 321, 375,
                    78, 191, 80, 81, 82, 13, 312, 311, 310, 415,
                    95, 88, 178, 87, 14, 317, 402, 318, 324, 308,
                ])

            self.EYES_IDXS0 = np.array([33,159,133,145,362,386,263,374,1,2,98,327])

            # Landmark indices in original data
            self.LEFT_HAND_IDXS0 = np.arange(468,489)
            self.RIGHT_HAND_IDXS0 = np.arange(522,543)
            self.LEFT_POSE_IDXS0 = np.concatenate((np.array([489, 491, 494, 496, 497, 500, 501, 502, 504, 506, 508, 510]), self.EYES_IDXS0))
            self.RIGHT_POSE_IDXS0 = np.concatenate((np.array([489, 491, 494, 496, 497, 500, 501, 503, 505, 507, 509, 511]) , self.EYES_IDXS0))
            self.LANDMARK_IDXS_LEFT_DOMINANT0 = np.concatenate((self.LIPS_IDXS0, self.LEFT_HAND_IDXS0, self.LEFT_POSE_IDXS0))
            self.LANDMARK_IDXS_RIGHT_DOMINANT0 = np.concatenate((self.LIPS_IDXS0, self.RIGHT_HAND_IDXS0, self.RIGHT_POSE_IDXS0))
            self.HAND_IDXS0 = np.concatenate((self.LEFT_HAND_IDXS0, self.RIGHT_HAND_IDXS0), axis=0)
            self.N_COLS = self.LANDMARK_IDXS_LEFT_DOMINANT0.size

            # Landmark indices in processed data
            self.LIPS_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.LIPS_IDXS0)).squeeze()
            self.LEFT_HAND_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.LEFT_HAND_IDXS0)).squeeze()
            self.RIGHT_HAND_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.RIGHT_HAND_IDXS0)).squeeze()
            self.HAND_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.HAND_IDXS0)).squeeze()
            self.POSE_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.LEFT_POSE_IDXS0)).squeeze()

            self.LIPS_START = 0
            self.LEFT_HAND_START = self.LIPS_IDXS.size
            self.RIGHT_HAND_START = self.LEFT_HAND_START + self.LEFT_HAND_IDXS.size
            self.POSE_START = self.RIGHT_HAND_START + self.RIGHT_HAND_IDXS.size

            self.statsdict = {'POSE_MEAN': np.array([[0.4728136 , 0.4240536 ],[0.536576  , 0.373784  ],[0.40942368, 0.37736   ],[0.5997658 , 0.40010867],[0.35893154, 0.40480456],[0.7798274 , 0.64561284],[0.20726942, 0.6598391 ],[0.48128158, 0.89589083],[0.47540927, 0.68182313],[0.47280234, 0.6161903 ],[0.47247988, 0.5797547 ],[0.47407588, 0.6113952 ],[0.36968395, 0.3722532 ],[0.39401838, 0.3643502 ],[0.42822745, 0.37152776],[0.39657575, 0.37733042],[0.5022916 , 0.37017274],[0.5364219 , 0.3611874 ],[0.5629489 , 0.367665  ],[0.53461444, 0.37427425],[0.46230426, 0.4237136 ],[0.46400854, 0.43631318],[0.42751116, 0.4359091 ],[0.5033123 , 0.4342242 ]], dtype=np.float32), 'POSE_STD': np.array([[0.06185431, 0.07617903],[0.06488567, 0.07624143],[0.06678798, 0.07563455],[0.06733617, 0.07600936],[0.07485308, 0.07561885],[0.08024707, 0.07615038],[0.08732421, 0.07509337],[0.48750842, 0.0933991 ],[0.2785731 , 0.13016148],[0.23597713, 0.15089056],[0.20231341, 0.1394862 ],[0.19836532, 0.13098423],[0.07362793, 0.07461724],[0.07181355, 0.07450472],[0.06945913, 0.07406247],[0.07160134, 0.07419308],[0.0675202 , 0.07435886],[0.06730472, 0.07509894],[0.06703633, 0.07499121],[0.06676407, 0.07452413],[0.06717017, 0.07596151],[0.0665914 , 0.07586987],[0.06808676, 0.0755309 ],[0.06549962, 0.07555062]], dtype=np.float32), 'LEFT_HANDS_MEAN': np.array([[0.75869346, 0.66998696],[0.7097719 , 0.63058126],[0.65930927, 0.5900772 ],[0.618904  , 0.56465566],[0.59087056, 0.549599  ],[0.66726446, 0.544086  ],[0.6067027 , 0.51483697],[0.57830566, 0.5121041 ],[0.56221086, 0.51145816],[0.6791375 , 0.5559241 ],[0.6078051 , 0.5352497 ],[0.5863684 , 0.54267365],[0.5791031 , 0.5469511 ],[0.69115645, 0.576975  ],[0.62416214, 0.56305933],[0.60877424, 0.5725781 ],[0.6057572 , 0.577219  ],[0.7028756 , 0.603207  ],[0.65143657, 0.59304   ],[0.63851345, 0.5969334 ],[0.63490546, 0.59807736]], dtype=np.float32), 'LEFT_HANDS_STD': np.array([[0.10106158, 0.12571585],[0.10476863, 0.12234896],[0.1093974 , 0.12539777],[0.11426649, 0.13273634],[0.1234008 , 0.14140362],[0.11315253, 0.13402379],[0.12135054, 0.14970353],[0.12469217, 0.16204847],[0.12982582, 0.17308722],[0.1132836 , 0.14246114],[0.12367266, 0.16114126],[0.12492438, 0.17307244],[0.13037677, 0.18315522],[0.11868669, 0.15085693],[0.13010697, 0.16768062],[0.13008882, 0.17569257],[0.1342971 , 0.18288803],[0.12936541, 0.15792547],[0.14111309, 0.17060271],[0.14181338, 0.17685519],[0.14492628, 0.18267772]], dtype=np.float32), 'LIPS_MEAN': np.array([[0.41525415, 0.47939426],[0.41882986, 0.4750107 ],[0.4253797 , 0.47045675],[0.43502998, 0.4652801 ],[0.45024556, 0.4603687 ],[0.46643794, 0.4619916 ],[0.4826309 , 0.4595575 ],[0.49905086, 0.46370402],[0.50966954, 0.46836886],[0.5172951 , 0.47256923],[0.52186495, 0.47683564],[0.42011452, 0.48348522],[0.42698193, 0.48780724],[0.43791977, 0.49284703],[0.4521003 , 0.49624422],[0.46875396, 0.4970006 ],[0.48545423, 0.49564663],[0.49979982, 0.49166977],[0.5105381 , 0.48608747],[0.51730937, 0.4812727 ],[0.42040178, 0.47893593],[0.4277283 , 0.47716606],[0.43454722, 0.4756335 ],[0.4434654 , 0.47431198],[0.45452997, 0.47371727],[0.46734703, 0.4737115 ],[0.48040727, 0.47312412],[0.491821  , 0.47317424],[0.50132763, 0.47401685],[0.50891286, 0.4752054 ],[0.42795196, 0.47932437],[0.4346833 , 0.47945398],[0.44365668, 0.47955698],[0.4547623 , 0.47988176],[0.46778014, 0.48014253],[0.48093408, 0.47932917],[0.49227762, 0.4784758 ],[0.50165343, 0.47791994],[0.5087401 , 0.47744554],[0.5166792 , 0.47662103]], dtype=np.float32), 'LIPS_STD': np.array([[0.06906798, 0.07659707],[0.06854177, 0.07673516],[0.06809565, 0.07690708],[0.06770112, 0.07709396],[0.06728175, 0.07725324],[0.06666845, 0.07750451],[0.06607704, 0.07712494],[0.06544961, 0.07679018],[0.06496318, 0.07646379],[0.064566  , 0.07615448],[0.06415609, 0.07590489],[0.06858069, 0.07682684],[0.06807555, 0.07725308],[0.06744229, 0.07791283],[0.06674504, 0.07845675],[0.06603798, 0.07858105],[0.06536768, 0.07832868],[0.06486291, 0.07766014],[0.06449548, 0.07683925],[0.06428463, 0.0762542 ],[0.0688288 , 0.07666568],[0.06821401, 0.07687151],[0.06778651, 0.07708108],[0.06731777, 0.07731194],[0.06683893, 0.07751493],[0.06631962, 0.0776047 ],[0.06572415, 0.07737922],[0.065234  , 0.07702701],[0.06481469, 0.07666281],[0.0645657 , 0.07635052],[0.06820136, 0.07669736],[0.06777402, 0.07682188],[0.06728584, 0.07704714],[0.06678381, 0.07727893],[0.06626177, 0.07739697],[0.06568881, 0.0771628 ],[0.06520426, 0.07679975],[0.06479978, 0.07643656],[0.0645258 , 0.07619682],[0.06424969, 0.07603587]], dtype=np.float32)}

        elif file == "gislr-mw-16c":
            # option: V29 (89 landmarks)
            self.LIPS_IDXS0 = np.array([
                61, 185, 40, 39, 37, 0, 267, 269, 270, 409,
                291, 146, 91, 181, 84, 17, 314, 405, 321, 375,
                78, 191, 80, 81, 82, 13, 312, 311, 310, 415,
                95, 88, 178, 87, 14, 317, 402, 318, 324, 308,
            ])

            self.REYE_IDXS0  = np.array([
                    33, 7, 163, 144, 145, 153, 154, 155, 133,
                    246, 161, 160, 159, 158, 157, 173,
                    ])
            self.LEYE_IDXS0  = np.array([
                263, 249, 390, 373, 374, 380, 381, 382, 362,
                466, 388, 387, 386, 385, 384, 398,
            ])    

            # Landmark indices in original data
            self.LEFT_HAND_IDXS0 = np.arange(468,489)
            self.RIGHT_HAND_IDXS0 = np.arange(522,543)
            self.LEFT_POSE_IDXS0 = np.concatenate((np.array([490, 491, 492, 496, 498, 500, 502, 504, 506, 508, 510, 512]), self.LEYE_IDXS0))
            self.RIGHT_POSE_IDXS0 = np.concatenate((np.array([493, 494, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513]) , self.REYE_IDXS0))
            self.LANDMARK_IDXS_LEFT_DOMINANT0 = np.concatenate((self.LIPS_IDXS0, self.LEFT_HAND_IDXS0, self.LEFT_POSE_IDXS0))
            self.LANDMARK_IDXS_RIGHT_DOMINANT0 = np.concatenate((self.LIPS_IDXS0, self.RIGHT_HAND_IDXS0, self.RIGHT_POSE_IDXS0))
            self.HAND_IDXS0 = np.concatenate((self.LEFT_HAND_IDXS0, self.RIGHT_HAND_IDXS0), axis=0)
            self.N_COLS = self.LANDMARK_IDXS_LEFT_DOMINANT0.size

            # Landmark indices in processed data
            self.LIPS_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.LIPS_IDXS0)).squeeze()
            self.LEFT_HAND_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.LEFT_HAND_IDXS0)).squeeze()
            self.RIGHT_HAND_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.RIGHT_HAND_IDXS0)).squeeze()
            self.HAND_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.HAND_IDXS0)).squeeze()
            self.POSE_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.LEFT_POSE_IDXS0)).squeeze()

            self.LIPS_START = 0
            self.LEFT_HAND_START = self.LIPS_IDXS.size
            self.RIGHT_HAND_START = self.LEFT_HAND_START + self.LEFT_HAND_IDXS.size
            self.POSE_START = self.RIGHT_HAND_START + self.RIGHT_HAND_IDXS.size

            self.statsdict = {'POSE_MEAN': np.array([[0.47201216, 0.3745735 ],[0.4714275 , 0.37561607],[0.47129446, 0.37719843],[0.4790906 , 0.40182438],[0.47523004, 0.47859067],[0.48737612, 0.64327335],[0.48128158, 0.89589083],[0.47540927, 0.68182313],[0.47280234, 0.6161903 ],[0.47247988, 0.5797547 ],[0.47407588, 0.6113952 ],[0.48888448, 1.2612901 ],[0.4666906 , 0.3696339 ],[0.46658325, 0.37206534],[0.4663827 , 0.37357628],[0.4661614 , 0.3749186 ],[0.46590173, 0.3755108 ],[0.4657035 , 0.37471035],[0.4655093 , 0.37292263],[0.46539283, 0.37174407],[0.46524942, 0.37066627],[0.46633175, 0.3679984 ],[0.46598956, 0.36619952],[0.46561322, 0.36398214],[0.4652609 , 0.3625786 ],[0.46514878, 0.36292174],[0.46515983, 0.3649272 ],[0.46517307, 0.3681748 ]], dtype=np.float32), 'POSE_STD': np.array([[0.05071481, 0.07574923],[0.05511412, 0.07578547],[0.06700505, 0.07585852],[0.08831505, 0.07517058],[0.05065305, 0.07682078],[0.23723371, 0.07482006],[0.48750842, 0.0933991 ],[0.2785731 , 0.13016148],[0.23597713, 0.15089056],[0.20231341, 0.1394862 ],[0.19836532, 0.13098423],[0.18053728, 0.11928955],[0.0706059 , 0.0746784 ],[0.06756002, 0.07452888],[0.06436116, 0.07440997],[0.06008878, 0.07429449],[0.05472855, 0.07417458],[0.05120937, 0.07409719],[0.04998251, 0.07407372],[0.05037349, 0.07410303],[0.05097796, 0.07414635],[0.06840704, 0.07473528],[0.06567759, 0.07477719],[0.06140132, 0.07480501],[0.05577986, 0.07474032],[0.05185898, 0.07459484],[0.0501228 , 0.07439011],[0.0504273 , 0.07422087]], dtype=np.float32), 'LEFT_HANDS_MEAN': np.array([[0.75869346, 0.66998696],[0.7097719 , 0.63058126],[0.65930927, 0.5900772 ],[0.618904  , 0.56465566],[0.59087056, 0.549599  ],[0.66726446, 0.544086  ],[0.6067027 , 0.51483697],[0.57830566, 0.5121041 ],[0.56221086, 0.51145816],[0.6791375 , 0.5559241 ],[0.6078051 , 0.5352497 ],[0.5863684 , 0.54267365],[0.5791031 , 0.5469511 ],[0.69115645, 0.576975  ],[0.62416214, 0.56305933],[0.60877424, 0.5725781 ],[0.6057572 , 0.577219  ],[0.7028756 , 0.603207  ],[0.65143657, 0.59304   ],[0.63851345, 0.5969334 ],[0.63490546, 0.59807736]], dtype=np.float32), 'LEFT_HANDS_STD': np.array([[0.10106158, 0.12571585],[0.10476863, 0.12234896],[0.1093974 , 0.12539777],[0.11426649, 0.13273634],[0.1234008 , 0.14140362],[0.11315253, 0.13402379],[0.12135054, 0.14970353],[0.12469217, 0.16204847],[0.12982582, 0.17308722],[0.1132836 , 0.14246114],[0.12367266, 0.16114126],[0.12492438, 0.17307244],[0.13037677, 0.18315522],[0.11868669, 0.15085693],[0.13010697, 0.16768062],[0.13008882, 0.17569257],[0.1342971 , 0.18288803],[0.12936541, 0.15792547],[0.14111309, 0.17060271],[0.14181338, 0.17685519],[0.14492628, 0.18267772]], dtype=np.float32), 'LIPS_MEAN': np.array([[0.41525415, 0.47939426],[0.41882986, 0.4750107 ],[0.4253797 , 0.47045675],[0.43502998, 0.4652801 ],[0.45024556, 0.4603687 ],[0.46643794, 0.4619916 ],[0.4826309 , 0.4595575 ],[0.49905086, 0.46370402],[0.50966954, 0.46836886],[0.5172951 , 0.47256923],[0.52186495, 0.47683564],[0.42011452, 0.48348522],[0.42698193, 0.48780724],[0.43791977, 0.49284703],[0.4521003 , 0.49624422],[0.46875396, 0.4970006 ],[0.48545423, 0.49564663],[0.49979982, 0.49166977],[0.5105381 , 0.48608747],[0.51730937, 0.4812727 ],[0.42040178, 0.47893593],[0.4277283 , 0.47716606],[0.43454722, 0.4756335 ],[0.4434654 , 0.47431198],[0.45452997, 0.47371727],[0.46734703, 0.4737115 ],[0.48040727, 0.47312412],[0.491821  , 0.47317424],[0.50132763, 0.47401685],[0.50891286, 0.4752054 ],[0.42795196, 0.47932437],[0.4346833 , 0.47945398],[0.44365668, 0.47955698],[0.4547623 , 0.47988176],[0.46778014, 0.48014253],[0.48093408, 0.47932917],[0.49227762, 0.4784758 ],[0.50165343, 0.47791994],[0.5087401 , 0.47744554],[0.5166792 , 0.47662103]], dtype=np.float32), 'LIPS_STD': np.array([[0.06906798, 0.07659707],[0.06854177, 0.07673516],[0.06809565, 0.07690708],[0.06770112, 0.07709396],[0.06728175, 0.07725324],[0.06666845, 0.07750451],[0.06607704, 0.07712494],[0.06544961, 0.07679018],[0.06496318, 0.07646379],[0.064566  , 0.07615448],[0.06415609, 0.07590489],[0.06858069, 0.07682684],[0.06807555, 0.07725308],[0.06744229, 0.07791283],[0.06674504, 0.07845675],[0.06603798, 0.07858105],[0.06536768, 0.07832868],[0.06486291, 0.07766014],[0.06449548, 0.07683925],[0.06428463, 0.0762542 ],[0.0688288 , 0.07666568],[0.06821401, 0.07687151],[0.06778651, 0.07708108],[0.06731777, 0.07731194],[0.06683893, 0.07751493],[0.06631962, 0.0776047 ],[0.06572415, 0.07737922],[0.065234  , 0.07702701],[0.06481469, 0.07666281],[0.0645657 , 0.07635052],[0.06820136, 0.07669736],[0.06777402, 0.07682188],[0.06728584, 0.07704714],[0.06678381, 0.07727893],[0.06626177, 0.07739697],[0.06568881, 0.0771628 ],[0.06520426, 0.07679975],[0.06479978, 0.07643656],[0.0645258 , 0.07619682],[0.06424969, 0.07603587]], dtype=np.float32)}
    
        elif file == 'gislr-mw-16d':
            self.LIPS_IDXS0 = np.array([
                61, 185, 40, 39, 37, 0, 267, 269, 270, 409,
                291, 146, 91, 181, 84, 17, 314, 405, 321, 375,
                78, 191, 80, 81, 82, 13, 312, 311, 310, 415,
                95, 88, 178, 87, 14, 317, 402, 318, 324, 308,
            ])

            self.REYE_IDXS0  = np.array([
                    33, 7, 163, 144, 145, 153, 154, 155, 133,
                    246, 161, 160, 159, 158, 157, 173,
                    ])
            self.LEYE_IDXS0  = np.array([
                263, 249, 390, 373, 374, 380, 381, 382, 362,
                466, 388, 387, 386, 385, 384, 398,
            ])    

            # Landmark indices in original data
            self.LEFT_HAND_IDXS0 = np.arange(468,489)
            self.RIGHT_HAND_IDXS0 = np.arange(522,543)
            self.LEFT_POSE_IDXS0 = np.concatenate((np.array([490, 491, 492, 496, 498, 500, 502, 504, 506, 508, 510, 512]), self.LEYE_IDXS0))
            self.RIGHT_POSE_IDXS0 = np.concatenate((np.array([493, 494, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513]) , self.REYE_IDXS0))
            self.LANDMARK_IDXS_LEFT_DOMINANT0 = np.concatenate((self.LIPS_IDXS0, self.LEFT_HAND_IDXS0, self.LEFT_POSE_IDXS0))
            self.LANDMARK_IDXS_RIGHT_DOMINANT0 = np.concatenate((self.LIPS_IDXS0, self.RIGHT_HAND_IDXS0, self.RIGHT_POSE_IDXS0))
            self.HAND_IDXS0 = np.concatenate((self.LEFT_HAND_IDXS0, self.RIGHT_HAND_IDXS0), axis=0)
            self.N_COLS = self.LANDMARK_IDXS_LEFT_DOMINANT0.size

            # Landmark indices in processed data
            self.LIPS_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.LIPS_IDXS0)).squeeze()
            self.LEFT_HAND_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.LEFT_HAND_IDXS0)).squeeze()
            self.RIGHT_HAND_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.RIGHT_HAND_IDXS0)).squeeze()
            self.HAND_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.HAND_IDXS0)).squeeze()
            self.POSE_IDXS = np.argwhere(np.isin(self.LANDMARK_IDXS_LEFT_DOMINANT0, self.LEFT_POSE_IDXS0)).squeeze()

            self.LIPS_START = 0
            self.LEFT_HAND_START = self.LIPS_IDXS.size
            self.RIGHT_HAND_START = self.LEFT_HAND_START + self.LEFT_HAND_IDXS.size
            self.POSE_START = self.RIGHT_HAND_START + self.RIGHT_HAND_IDXS.size

            self.statsdict = {'POSE_MEAN':np. array([[0.50643045, 0.5146016 ],[0.5302878 , 0.5136341 ],[0.55223304, 0.5127399 ],[0.5797599 , 0.51102203],[0.5197873 , 0.5128997 ],[0.7350643 , 0.49863216],[0.9826492 , 0.49220154],[0.76972705, 0.50217134],[0.71643174, 0.50554395],[0.68418986, 0.5037289 ],[0.68365484, 0.50438046],[0.6729091 , 0.48518616],[0.5576577 , 0.5129806 ],[0.5533616 , 0.51329136],[0.5485797 , 0.5135714 ],[0.54155606, 0.51389664],[0.530766  , 0.5142657 ],[0.5198816 , 0.51455784],[0.5095807 , 0.51477635],[0.5027388 , 0.5149352 ],[0.4990928 , 0.5149585 ],[0.5545092 , 0.5129674 ],[0.5504387 , 0.5130307 ],[0.5435275 , 0.5132178 ],[0.5326953 , 0.5136016 ],[0.5218065 , 0.51399666],[0.5107016 , 0.5144426 ],[0.5028039 , 0.51478946]], dtype=np.float32), 'POSE_STD': np.array([[0.06202508, 0.17225303],[0.06213618, 0.17151664],[0.06219763, 0.17035341],[0.06114532, 0.15184316],[0.0600884 , 0.11504631],[0.07353389, 0.17532082],[0.12015478, 0.40906882],[0.11463006, 0.23371881],[0.13008471, 0.20356944],[0.11964459, 0.17762868],[0.11279158, 0.18682073],[0.0791766 , 0.7686471 ],[0.0667409 , 0.17542489],[0.0667283 , 0.17343807],[0.06678652, 0.172193  ],[0.06687215, 0.17107825],[0.06704135, 0.17053537],[0.06726395, 0.17109242],[0.0675608 , 0.17245206],[0.06777567, 0.1733765 ],[0.0679439 , 0.17424211],[0.06691901, 0.1767414 ],[0.06709217, 0.17818004],[0.06729865, 0.17994343],[0.06753044, 0.18100978],[0.0676804 , 0.18064052],[0.06781014, 0.17891872],[0.06793439, 0.17624812]], dtype=np.float32), 'LEFT_HANDS_MEAN': np.array([[0.76516145, 0.49972183],[0.71623945, 0.5010295 ],[0.66577667, 0.5008231 ],[0.6253715 , 0.49952465],[0.5973382 , 0.49839923],[0.673732  , 0.5014774 ],[0.6131704 , 0.49863195],[0.5847736 , 0.4967425 ],[0.56867874, 0.49547595],[0.6856056 , 0.50011265],[0.61427265, 0.49712875],[0.59283584, 0.4955058 ],[0.58557063, 0.49433166],[0.69762415, 0.49860606],[0.63063   , 0.49582732],[0.61524194, 0.49462742],[0.61222476, 0.49384743],[0.7093432 , 0.4972201 ],[0.6579044 , 0.49537256],[0.64498115, 0.49480253],[0.64137334, 0.49449474]], dtype=np.float32), 'LEFT_HANDS_STD': np.array([[0.12101983, 0.22244035],[0.12291703, 0.19279301],[0.12618838, 0.17134078],[0.13035135, 0.16589606],[0.13865064, 0.16826195],[0.1302079 , 0.16096944],[0.13776265, 0.16979139],[0.14113703, 0.18058574],[0.14593793, 0.1905729 ],[0.13168937, 0.17110683],[0.14144243, 0.18211898],[0.14264794, 0.19406107],[0.14730747, 0.2040478 ],[0.137634  , 0.18514328],[0.14837636, 0.19420207],[0.1484335 , 0.20412217],[0.15201972, 0.21201184],[0.14802153, 0.20217349],[0.15915401, 0.2076229 ],[0.15985744, 0.21463606],[0.16255133, 0.22022055]], dtype=np.float32), 'LIPS_MEAN': np.array([[0.46439484, 0.51750165],[0.46483418, 0.5177695 ],[0.46516785, 0.5179899 ],[0.46537146, 0.5181307 ],[0.46544895, 0.51807094],[0.46557373, 0.51797104],[0.46535465, 0.5176416 ],[0.46497664, 0.5172103 ],[0.46476305, 0.5168063 ],[0.46462724, 0.51639116],[0.4647162 , 0.5160073 ],[0.46471316, 0.51739734],[0.46506748, 0.5173449 ],[0.4654891 , 0.517309  ],[0.4658438 , 0.5172246 ],[0.46607983, 0.5170312 ],[0.46593043, 0.516793  ],[0.46564415, 0.51652926],[0.46526217, 0.5162623 ],[0.46494067, 0.5160827 ],[0.46439666, 0.5175221 ],[0.46473473, 0.517726  ],[0.46497494, 0.5178533 ],[0.46522915, 0.5179209 ],[0.46542388, 0.51789314],[0.46558177, 0.5177909 ],[0.46538806, 0.5175516 ],[0.46513134, 0.51725256],[0.4649022 , 0.5169129 ],[0.4646752 , 0.5165701 ],[0.46471208, 0.5172373 ],[0.46496743, 0.51707554],[0.46524575, 0.51692474],[0.4654776 , 0.51677567],[0.46562967, 0.5166332 ],[0.4654311 , 0.516436  ],[0.46517354, 0.5162808 ],[0.4649259 , 0.51616514],[0.46475482, 0.5161105 ],[0.46471915, 0.5161532 ]], dtype=np.float32), 'LIPS_STD': np.array([[0.10859311, 0.11343537],[0.10533211, 0.11463379],[0.09965562, 0.11603965],[0.0915886 , 0.11784379],[0.07970224, 0.11975153],[0.06846824, 0.11929041],[0.0593781 , 0.11996011],[0.0536559 , 0.11817434],[0.05240576, 0.11635727],[0.05283744, 0.11486458],[0.05354746, 0.11351216],[0.10427663, 0.11256714],[0.09836387, 0.11193743],[0.08931528, 0.11155359],[0.07833554, 0.11150248],[0.0669926 , 0.11149915],[0.05807919, 0.11146595],[0.0535397 , 0.11151421],[0.05242827, 0.11191367],[0.05281444, 0.11257952],[0.10408719, 0.1135506 ],[0.09770102, 0.11410385],[0.09196152, 0.11462507],[0.08477738, 0.11512008],[0.07642011, 0.11541189],[0.06771554, 0.11546162],[0.06011872, 0.11546852],[0.05525281, 0.11521226],[0.05278378, 0.11473788],[0.05204696, 0.11421346],[0.09747814, 0.11339274],[0.09182964, 0.11337628],[0.08460496, 0.11344516],[0.07623831, 0.1134906 ],[0.0674471 , 0.11349671],[0.05990937, 0.11352133],[0.05516462, 0.11349664],[0.05278839, 0.11343162],[0.05210541, 0.11344918],[0.05251497, 0.11363079]], dtype=np.float32)}

def set_specific_gpu(ID):
    gpus = tf.config.list_physical_devices(device_type='GPU')    
    tf.config.set_visible_devices(gpus[ID], 'GPU')